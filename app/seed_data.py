#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from sqlalchemy.orm import Session
from app.database import SessionLocal, engine
from app.models import Base, Organization, Building, Activity, Phone
from app.services import OrganizationService, BuildingService, ActivityService

def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(bind=engine)
    
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        existing_organizations = db.query(Organization).count()
        if existing_organizations > 0:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
            return
        # 1. –°–æ–∑–¥–∞–µ–º –∑–¥–∞–Ω–∏—è
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–¥–∞–Ω–∏–π...")
        buildings_data = [
            {
                "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1",
                "latitude": 55.7558,
                "longitude": 37.6176
            },
            {
                "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, 15",
                "latitude": 55.7520,
                "longitude": 37.5934
            },
            {
                "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 32",
                "latitude": 55.7033,
                "longitude": 37.5833
            },
            {
                "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ë–ª—é—Ö–µ—Ä–∞, 32/1",
                "latitude": 55.7890,
                "longitude": 37.6123
            },
            {
                "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–Ω–∞—è –ü–ª–æ—â–∞–¥—å, 1",
                "latitude": 55.7539,
                "longitude": 37.6208
            }
        ]
        
        buildings = []
        for building_data in buildings_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∑–¥–∞–Ω–∏–µ
            existing_building = db.query(Building).filter(
                Building.address == building_data["address"]
            ).first()
            if existing_building:
                buildings.append(existing_building)
            else:
                building = Building(**building_data)
                db.add(building)
                db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
                buildings.append(building)
        
        # 2. –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –ö–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        food = db.query(Activity).filter(Activity.name == "–ï–¥–∞").first()
        if not food:
            food = Activity(name="–ï–¥–∞")
            db.add(food)
            db.flush()
        
        transport = db.query(Activity).filter(Activity.name == "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç").first()
        if not transport:
            transport = Activity(name="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            db.add(transport)
            db.flush()
        
        services = db.query(Activity).filter(Activity.name == "–£—Å–ª—É–≥–∏").first()
        if not services:
            services = Activity(name="–£—Å–ª—É–≥–∏")
            db.add(services)
            db.flush()
        
        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ï–¥—ã
        meat = db.query(Activity).filter(Activity.name == "–ú—è—Å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è").first()
        if not meat:
            meat = Activity(name="–ú—è—Å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è", parent_id=food.id)
            db.add(meat)
            db.flush()
        
        dairy = db.query(Activity).filter(Activity.name == "–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è").first()
        if not dairy:
            dairy = Activity(name="–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è", parent_id=food.id)
            db.add(dairy)
            db.flush()
        
        bakery = db.query(Activity).filter(Activity.name == "–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è").first()
        if not bakery:
            bakery = Activity(name="–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è", parent_id=food.id)
            db.add(bakery)
            db.flush()
        
        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        cars = db.query(Activity).filter(Activity.name == "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏").first()
        if not cars:
            cars = Activity(name="–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", parent_id=transport.id)
            db.add(cars)
            db.flush()
        
        trucks = db.query(Activity).filter(Activity.name == "–ì—Ä—É–∑–æ–≤—ã–µ").first()
        if not trucks:
            trucks = Activity(name="–ì—Ä—É–∑–æ–≤—ã–µ", parent_id=cars.id)
            db.add(trucks)
            db.flush()
        
        passenger = db.query(Activity).filter(Activity.name == "–õ–µ–≥–∫–æ–≤—ã–µ").first()
        if not passenger:
            passenger = Activity(name="–õ–µ–≥–∫–æ–≤—ã–µ", parent_id=cars.id)
            db.add(passenger)
            db.flush()
        
        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –£—Å–ª—É–≥
        repair = db.query(Activity).filter(Activity.name == "–†–µ–º–æ–Ω—Ç").first()
        if not repair:
            repair = Activity(name="–†–µ–º–æ–Ω—Ç", parent_id=services.id)
            db.add(repair)
            db.flush()
        
        consulting = db.query(Activity).filter(Activity.name == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏").first()
        if not consulting:
            consulting = Activity(name="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", parent_id=services.id)
            db.add(consulting)
            db.flush()
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
        print("üìû –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
        phones_data = [
            "8-495-123-45-67",
            "8-495-234-56-78", 
            "8-495-345-67-89",
            "8-495-456-78-90",
            "8-495-567-89-01",
            "8-495-678-90-12",
            "8-495-789-01-23",
            "8-495-890-12-34"
        ]
        
        phones = []
        for phone_number in phones_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω
            existing_phone = db.query(Phone).filter(Phone.number == phone_number).first()
            if existing_phone:
                phones.append(existing_phone)
            else:
                phone = Phone(number=phone_number)
                db.add(phone)
                db.flush()
                phones.append(phone)
        
        # 4. –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        print("üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...")
        organizations_data = [
            {
                "name": "–û–û–û –†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞",
                "building_id": buildings[0].id,
                "phone_numbers": [phones[0].number, phones[1].number],
                "activity_ids": [meat.id, dairy.id]
            },
            {
                "name": "–ò–ü –ò–≤–∞–Ω–æ–≤ –ò.–ò.",
                "building_id": buildings[1].id,
                "phone_numbers": [phones[2].number],
                "activity_ids": [bakery.id]
            },
            {
                "name": "–ó–ê–û –ê–≤—Ç–æ–ú–∏—Ä",
                "building_id": buildings[2].id,
                "phone_numbers": [phones[3].number, phones[4].number],
                "activity_ids": [cars.id, trucks.id]
            },
            {
                "name": "–û–û–û –¢–µ—Ö–°–µ—Ä–≤–∏—Å",
                "building_id": buildings[3].id,
                "phone_numbers": [phones[5].number],
                "activity_ids": [repair.id]
            },
            {
                "name": "–ò–ü –ü–µ—Ç—Ä–æ–≤ –ü.–ü.",
                "building_id": buildings[4].id,
                "phone_numbers": [phones[6].number, phones[7].number],
                "activity_ids": [consulting.id]
            },
            {
                "name": "–û–û–û –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                "building_id": buildings[0].id,
                "phone_numbers": [phones[0].number],
                "activity_ids": [dairy.id]
            },
            {
                "name": "–ò–ü –°–∏–¥–æ—Ä–æ–≤ –°.–°.",
                "building_id": buildings[1].id,
                "phone_numbers": [phones[1].number],
                "activity_ids": [passenger.id]
            }
        ]
        
        for org_data in organizations_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
            existing_org = db.query(Organization).filter(Organization.name == org_data["name"]).first()
            if existing_org:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
            org_phones = [p for p in phones if p.number in org_data["phone_numbers"]]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            org_activities = db.query(Activity).filter(Activity.id.in_(org_data["activity_ids"])).all()
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            organization = Organization(
                name=org_data["name"],
                building_id=org_data["building_id"],
                phones=org_phones,
                activities=org_activities
            )
            
            db.add(organization)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ:")
        print(f"   ‚Ä¢ –ó–¥–∞–Ω–∏–π: {len(buildings)}")
        print(f"   ‚Ä¢ –í–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {db.query(Activity).count()}")
        print(f"   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω–æ–≤: {len(phones)}")
        print(f"   ‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {len(organizations_data)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    create_test_data()
